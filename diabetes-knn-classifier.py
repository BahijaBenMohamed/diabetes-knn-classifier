# -*- coding: utf-8 -*-
"""IA_Dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TtAnk7KJLkmNKi5CzX8pjlb8udaKIogg
"""

import numpy as np
import pandas as pd

df = pd.read_csv('/content/diabetes.csv')

df.head()

df.shape

df.nunique()
#valeur ili nesete3emlohe fi kol colone

df.dtypes
#nchofo type mte3 kol colon

df.describe()

"""**data analysis**"""

import matplotlib.pyplot as plt
import seaborn as sns

for col in df.columns[:-1]:
  plt.figure(figsize=(7,5))
  sns.boxplot(x='Outcome', y=col, data=df)
  plt.title(f'Box plot of {col} vs Outcome')

"""**Train test split**"""

X= df.drop('Outcome', axis=1).values
y= df['Outcome'].values
print(X)
print(y)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.4, random_state=42, stratify=y)

"""**Model training**"""

from sklearn.neighbors import KNeighborsClassifier
knn= KNeighborsClassifier(n_neighbors=1)

"""**search best model params**"""

from sklearn.model_selection import GridSearchCV

param_grid= {
    'n_neighbors':[1,2,3,4,5,6,7,8,9],
}
knn = KNeighborsClassifier()

grid_search= GridSearchCV(estimator=knn, param_grid=param_grid, cv=5, n_jobs=-1)

grid_search.fit(X_train, y_train)

print("Best Parameters", grid_search.best_params_)
print("Best Score", grid_search.best_score_)

knn = KNeighborsClassifier(n_neighbors=9)

knn.fit(X_train, y_train)

print("------------------------------------")

y_pred= knn.predict([[1,89,66,29,0,26.6,0.351,31]])
print("First person is: ", y_pred)

y_pred2=knn.predict([[2,197,70,45,543,30.5,0.158,53]])
print("Second person is: ", y_pred2)

print("------------------------------------")

"""**Model Evaluation**"""

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

y_pred= knn.predict(X_test)
accuracy= accuracy_score(y_test, y_pred)
print("Accuracy: ", accuracy)

print("classification rapport: ")
print(classification_report(y_test, y_pred))

"""**confusion matrix**"""

conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(5,5))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title("Confusion Matrix: ")
plt.show()